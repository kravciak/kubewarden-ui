name: Playwright Tests

on:
  workflow_dispatch:
#    inputs:
#      # head | rc | released | v2.7.1 | v2.7.2-rc7
#      rancher:
#        type: choice
#        default: 'rc'
#        description: Use 2.7.X-rcX (rc) or 2.7.X (released)
#        required: true
#        options:
#        - rc
#        - released
#      # head | released | tag#1.0.4-rc2 | pr#xxx | v#1.0.3
#      kubewarden:
#        type: choice
#        default: 'head'
#        required: true
#        options:
#        - head
#        - rc
#        - released
#      testsuite:
#        type: choice
#        default: 'install'
#        required: true
#        options:
#        - install
#        #- install + ui tests
#        - install + policies
#        #- install + everything

  pull_request:
    branches: main
    paths: pkg/kubewarden/**

#  push:
#    tags:
#      - '*'
#    branches:
#      - main
#    paths:
#      - pkg/kubewarden/**

  schedule:
    - cron: "0 2 * * *"

# env:
#   RANCHER: ${{ github.event.inputs.RANCHER || "latest" }}
#   KUBEWARDEN: ${{ github.event.inputs.KUBEWARDEN }}
#   TESTS: ${{ github.event.inputs.TESTS }}

jobs:
  e2e:
    # run schedule workflows only on kubewarden repo, not forks
    if: github.repository_owner == 'kubewarden' || github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
    # ==================================================================================================
    - name: Setup ENV
      run: |
        //case ${{github.event_name}} in
        //  pull_request)
        //    ;;
        //  schedule)
        //    ;;
        //  schedule)
        //    ;;
        //  workflow_dispatch)
        //    ;;
        //  *)
        //    ;;
        //esac

        if [[ ${{github.event_name}} == 'workflow_dispatch' ]]; then
          RANCHER=${{ inputs.RANCHER }} >> $GITHUB_ENV
          KUBEWARDEN=${{ inputs.kubewarden }} >> $GITHUB_ENV
        fi

        if [[ ${{github.event_name}} == 'pull_request' ]]; then
          RANCHER=devel >> $GITHUB_ENV
          KUBEWARDEN=source >> $GITHUB_ENV
        fi

        if [[ ${{github.event_name}} == 'schedule' ]]; then
          RANCHER=devel >> $GITHUB_ENV
          KUBEWARDEN=source >> $GITHUB_ENV
        else
          echo "KW_SOURCE=tag" >> $GITHUB_ENV
        fi

    # ==================================================================================================
    # Check out code and install requirements
    - uses: actions/checkout@v3
    - uses: azure/setup-kubectl@v3
    - uses: actions/setup-node@v3
    - name: Install dev dependencies
      if: env.KUBEWARDEN == 'source'
      run: yarn install --ignore-engines
    - name: Install playwright
      working-directory: tests
      run: |
        npm install
        npx playwright install --with-deps chromium

    # ==================================================================================================
    # Create k3d cluster and install rancher
    - name: "Create kubernetes cluster"
      uses: AbsaOSS/k3d-action@v2.4.0
      with:
        cluster-name: ${{ github.repository_owner }}-ghactions-cluster
        args: "--agents 1 --image rancher/k3s:v1.24.11-k3s1"
    - name: Install Rancher
      run: |
        RANCHER_FQDN=$(k3d cluster list ${{ github.repository_owner }}-ghactions-cluster -o json | jq -r '[.[].nodes[] | select(.role == "server").IP.IP] | first').nip.io

        # Wait for kube-system
        for i in {1..20}; do
            output=$(kubectl get pods --no-headers -o wide -n kube-system | grep -vw Completed || echo 'Fail')
            grep -vE '([0-9]+)/\1 +Running' <<< $output || break
            [ $i -ne 20 ] && sleep 10 || { echo "Godot: pods not running"; exit 1; }
        done

        # Wait for cert-manager
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
        kubectl wait --for=condition=Available deployment --timeout=2m -n cert-manager --all

        helm repo add --force-update rancher-latest https://releases.rancher.com/server-charts/latest
        helm upgrade --install rancher rancher-latest/rancher --wait \
            --namespace cattle-system --create-namespace \
            --set hostname=$RANCHER_FQDN \
            --set bootstrapPassword=sa \
            --devel
        for i in {1..20}; do
            output=$(kubectl get pods --no-headers -o wide -n cattle-system | grep -vw Completed || echo 'Wait: cattle-system')$'\n'
            output+=$(kubectl get pods --no-headers -o wide -n cattle-fleet-system | grep -vw Completed || echo 'Wait: cattle-fleet-system')$'\n'
            output+=$(kubectl get pods --no-headers -o wide -n cattle-fleet-local-system | grep -vw Completed || echo 'Wait: cattle-fleet-local-system')
            grep -vE '([0-9]+)/\1 +Running|^$' <<< $output || break
            [ $i -ne 20 ] && sleep 30 || { echo "Godot: pods not running"; exit 1; }
        done
    
        echo "RANCHER_FQDN=$RANCHER_FQDN" >> $GITHUB_ENV

    # ==================================================================================================
    # Run playwright tests and upload results
    # https://rancher.github.io/dashboard/testing/e2e-test#setup-for-local-tests
    - name: Install kubewarden (${{env.KUBEWARDEN}})
      if: env.KUBEWARDEN == 'source'
      working-directory: tests
      env:
        RANCHER_URL: https://localhost:8005
        API: https://${{env.RANCHER_FQDN}}
      run: |
        npx playwright test installation -gv 0[12] -x

    - name: Install kubewarden (${{env.KUBEWARDEN}})
      if: env.KUBEWARDEN == 'rc'
      working-directory: tests
      env:
        RANCHER_URL: https://${{env.RANCHER_FQDN}}
      run: |
        npx playwright test installation -x

    - name: Install kubewarden (${{env.KUBEWARDEN}})
      if: env.KUBEWARDEN == 'released'
      working-directory: tests
      env:
        RANCHER_URL: https://${{env.RANCHER_FQDN}}
      run: |
        npx playwright test installation -x


    - name: Install policies
      if: github.event_name != 'schedule'
      timeout-minutes: 90
      working-directory: tests
      env:
        RANCHER_URL: https://${{env.RANCHER_FQDN}}
      run: |
        npx playwright test policies -g 'Pod Privileged Policy'

    # ==================================================================================================
    # Artifacts & Summary
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/playwright-report/
        retention-days: 30

    - name: Add summary
      if: always()
      run: |
        # Tested code ref
        echo "Ref Name: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
